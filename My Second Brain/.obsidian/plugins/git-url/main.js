/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitUrlPlugin
});
module.exports = __toCommonJS(main_exports);

// LiveExport.ts
var LiveExport = class {
  constructor(file, resourceBaseUrl = "") {
    this.resourceBaseUrl = "";
    this.file = file;
    this.resourceBaseUrl = resourceBaseUrl;
  }
  isFileValid() {
    const isMD = this.file.extension === "md";
    const isSizeValid = this.file.stat.size < 1e6;
    return isMD && isSizeValid;
  }
  replaceResourcesLink(content, resourceBaseUrl) {
    const resourceRegex = /!\[\[(.*)\]\]/g;
    content = content.replace(resourceRegex, function(match, g1) {
      if (!resourceBaseUrl.endsWith("/") && !g1.startsWith("/"))
        resourceBaseUrl += "/";
      let replaceStr = "![](" + resourceBaseUrl + g1 + ")";
      replaceStr = replaceStr.replace(/ /g, "%20");
      return replaceStr;
    });
    return content;
  }
  async getExportString() {
    const content = await this.file.vault.cachedRead(this.file);
    if (!this.isFileValid())
      return null;
    const newContent = this.replaceResourcesLink(
      content,
      this.resourceBaseUrl
    );
    return newContent;
  }
};

// main.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  baseUrl: "",
  selected: "github",
  repoName: "",
  username: "",
  customURL: "",
  resourceBaseUrl: "",
  customResourceURL: "",
  attachmentsFolder: ""
};
var GitUrlPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GitUrlSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Copy git path").setIcon("link").onClick(async () => {
            const baseUrl = this.settings.baseUrl;
            navigator.clipboard.writeText(baseUrl + file.path);
            new import_obsidian.Notice("Copied to clipboard");
          });
        }).addItem((item) => {
          item.setTitle("Copy live content").setIcon("link").onClick(async () => {
            if (file instanceof import_obsidian.TFile) {
              const LiveExporter = new LiveExport(
                file,
                this.settings.resourceBaseUrl
              );
              const newContent = await LiveExporter.getExportString();
              if (!newContent)
                return new import_obsidian.Notice(
                  "File is too large or not a markdown file"
                );
              navigator.clipboard.writeText(newContent);
              new import_obsidian.Notice("Copied to clipboard");
            }
          });
        });
      })
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var GitUrlSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Base repo url Config").setHeading().setDesc("Create a base URL for copying git path");
    new import_obsidian.Setting(containerEl).setName("Username").addText((text) => {
      text.setValue(this.plugin.settings.username).onChange(
        async (value) => {
          this.plugin.settings.username = value;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian.Setting(containerEl).setName("Repo name").addText((text) => {
      text.setValue(this.plugin.settings.repoName).onChange(
        async (value) => {
          this.plugin.settings.repoName = value;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian.Setting(containerEl).setName("Custom base url").setDesc("Only use when custom is selected").addText((text) => {
      text.setValue(this.plugin.settings.customURL).setPlaceholder(
        "https://github.com/<username>/<repo-name>/tree/main/"
      ).onChange(async (value) => {
        this.plugin.settings.customURL = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Repo provider option").addDropdown((dropdown) => {
      dropdown.addOption("github", "Github");
      dropdown.addOption("gitlab", "Gitlab");
      dropdown.addOption("custom", "Custom");
      dropdown.setValue(this.plugin.settings.selected);
      dropdown.onChange(async (val) => {
        this.plugin.settings.selected = val;
        this.updateBaseURL();
        this.updateResourceBaseURL();
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).addButton((button) => {
      button.setButtonText("Show final url");
      button.onClick((e) => {
        new import_obsidian.Notice(this.plugin.settings.baseUrl);
      });
    });
    new import_obsidian.Setting(containerEl).setName("Base resource url config").setHeading().setDesc("Use to add remote path to resources when live export");
    new import_obsidian.Setting(containerEl).setName("Custom resource url").setDesc("Only use when custom in provider above is selected").addText((text) => {
      text.setValue(this.plugin.settings.customURL).onChange(
        async (value) => {
          this.plugin.settings.customResourceURL = value;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian.Setting(containerEl).setName("Attachments folder").setDesc(
      "When attachments aren't stored in root, see Settings > Files & Links > Attachments Folder"
    ).addText((text) => {
      text.setValue(this.plugin.settings.attachmentsFolder).setPlaceholder("attachments/images/").onChange(async (value) => {
        this.plugin.settings.attachmentsFolder = value;
        await this.plugin.saveSettings();
        this.updateResourceBaseURL();
      });
    });
    new import_obsidian.Setting(containerEl).addButton((button) => {
      button.setButtonText("Show final url");
      button.onClick((e) => {
        new import_obsidian.Notice(this.plugin.settings.resourceBaseUrl);
      });
    });
  }
  // HELPERS
  updateBaseURL() {
    const option = this.plugin.settings.selected;
    let username = this.plugin.settings.username;
    let repoName = this.plugin.settings.repoName;
    username = username === "" ? "<username>" : username;
    repoName = repoName === "" ? "<repo-name>" : repoName;
    if (option === "github") {
      this.plugin.settings.baseUrl = `https://github.com/${username}/${repoName}/tree/main/`;
    } else if (option === "gitlab") {
      this.plugin.settings.baseUrl = `https://gitlab.com/${username}/${repoName}/-/blob/master/`;
    } else if (option === "custom") {
      this.plugin.settings.baseUrl = this.plugin.settings.customURL;
    }
  }
  updateResourceBaseURL() {
    const option = this.plugin.settings.selected;
    let username = this.plugin.settings.username;
    let repoName = this.plugin.settings.repoName;
    username = username === "" ? "<username>" : username;
    repoName = repoName === "" ? "<repo-name>" : repoName;
    let tempURL = "";
    if (option === "gitlab") {
      tempURL = `https://gitlab.com/${username}/${repoName}/-/raw/master/`;
    } else if (option === "github") {
    } else if (option === "custom") {
      tempURL = this.plugin.settings.customResourceURL;
    }
    const attachmentsFolder = this.plugin.settings.attachmentsFolder;
    if (!tempURL.endsWith("/") && !attachmentsFolder.startsWith("/"))
      tempURL += "/";
    tempURL += this.plugin.settings.attachmentsFolder;
    this.plugin.settings.resourceBaseUrl = tempURL;
    this.plugin.saveSettings();
  }
};

/* nosourcemap */